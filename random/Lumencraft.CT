<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>257013</ID>
      <Description>"Enable"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : Lumencraft.exe
  Version:
  Date   : 2022-04-25
  Author : cfe

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobTree,$process,48 8B 08 48 8B 91 C8 00 00 00) // should be unique
alloc(newmem,$1000,aobTree)

label(code)
label(return)
label(pViewport)
registersymbol(pViewport)

newmem:

code:
  // Get_Tree().Get_Root()
  // Root = Viewport
  mov rcx,[rax+150]
  mov [pViewport],rcx
  mov rcx,[rax]
  mov rdx,[rcx+000000C8]
  jmp return
pViewport:
dq 0

aobTree:
  jmp newmem
  nop 5
return:
registersymbol(aobTree)


///


alloc(GetClassName,$1000,$process)
registersymbol(GetClassName)

GetClassName:
push rbx
sub rsp,40
mov rax,[rcx]
call qword ptr[rax+30] // object::_get_class_namev
add rsp,40
pop rbx
ret

[DISABLE]

aobTree:
  db 48 8B 08 48 8B 91 C8 00 00 00

dealloc(newmem)
dealloc(GetClassName)

unregistersymbol(*)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>257014</ID>
          <Description>"Lua"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end

function FindScript(name,func,byte)

local Player = FindNodeWithScriptInstance(VIEWPORT,name)
if Player == 0 then return 99 end

local Script = readPointer(Player+0x68)

local membermap = readPointer(Script+0x1B0)
local endmap = readPointer(Script+0x1B0+8)
local size = readInteger(Script+0x1b0+0x10)
local ret = 0

membermap = readPointer(membermap+0x10)

  if (readPointer(membermap+0x10) == endmap) then
     ret = OverrideScript(membermap,func,size,byte)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
    end
     ret = OverrideScript(membermap,func,size,byte)
  end

  return ret
end

function OverrideScript(map,str,size,byte)
 for i=0,(size-1) do
  local bWide = true
  local name = readPointer(map+0x30)
  local s = readPointer(name+8)
  if s &gt; 0 then bWide = false else s = readPointer(name+0x10) end
  s = readString(s,99,bWide)
  if s == str then
   local func = readPointer(map+0x38)
   local script = readPointer(func+0x50)
   writeBytes(script,byte)
   return 1
  end
  if readPointer(map+0x20) &gt; 0 then map=readPointer(map+0x20) end
 end
 return 0
end

function ReadNameString(ptr)
 local Name = readPointer(ptr)
 Name = readPointer(Name+0x10)
 return readString(Name,99,true)
end

function MemRec(Name,Ptr,CEType,Owner)
 local newRec = addList.createMemoryRecord()
 newRec.setDescription(Name)
 newRec.setAddress(Ptr)
 newRec.setType(CEType)
 newRec.DontSave=true
 newRec.appendToEntry(Owner)
end

function GetCEType(gType)
 if (gType == 1) then return 0 end --bool
 if (gType == 3) then return 5 end --a float is a double in godot
 if (gType == 5) then return 4 end --vector2 is a x,y float in godot
 if (gType == 4) then return 7 end --(unicode)string
 if (gType == 18) then return 3 end --node pointer
 return 2 --integer
end

--GDScript
function ReadName(member,index)
if index == readInteger(member+0x38) then
  local _NameString = readPointer(member+0x30)
  local NameString = readPointer(_NameString+0x10)
  local bWide = true
  if NameString == 0 then
   NameString = readPointer(_NameString+0x8)
   bWide = false
  end
  local str = readString(NameString,99,bWide)
  return str
end
local NextMap = readPointer(member+0x20)
if NextMap == 0 then return "null" end
local retstr = ReadName(NextMap,index)
return retstr
end

--Visual Script
function ReadNameVariant(member,mi)
  local NameString = readPointer(member+0x30)
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  local Info = {}
  Info.Name = szName
  Info.Type = readInteger(member+0x38)
  Info.Ptr = member+0x40
  table.insert(mi,Info)
  local NextMap = readPointer(member+0x20)
  if NextMap == 0 then return MemberInfo end
  ReadNameVariant(NextMap,mi)
end

function Transform(Node,NameRec)
 local Class = executeCodeEx(0,nil, getAddress("GetClassName"),Node)
 if Class == 0 or nil then return end

 Class = ReadNameString(Class)
 if Class == "Sprite" then
   local SpriteTransform = Node + 0x288
   MemRec("Transform X",SpriteTransform,4,NameRec)
   MemRec("Transform Y",SpriteTransform+0x4,4,NameRec)
   MemRec("Transform Rotation(Radiants)",SpriteTransform+0x8,4,NameRec)
   MemRec("Transform Scale X",SpriteTransform+0xC,4,NameRec)
   MemRec("Transform Scale Y",SpriteTransform+0x10,4,NameRec)
 end
 if (Class == "Kinematic2D") then
  ---....
 end
end

function FindNode(vp,str)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName == str then return Node end
  local ret = FindNode(Node,str)
  if ret &gt; 0 then return ret end
 end

 return 0
end

function FindNodeWithScriptInstance(vp,str)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)
 if Size == 0 or Size == nil then return 0 end

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  if Node == 0 then return 0 end
  local NameString = readPointer(Node+CONST_NAMESTRING)
  if NameString == 0 or NameString == nil then return 0 end
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName == str and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then return Node end
  local ret = FindNodeWithScriptInstance(Node,str)
  if ret &gt; 0 and readQword(ret+CONST_SCRIPTINSTANCE) &gt; 0 then return ret end
 end

 return 0
end

function FindNodesWithScript(vp,str,array)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  if NameString == 0 then return 0 end
  NameString = readPointer(NameString+0x10)
  local szName = readString(NameString,99,true)
  if szName ~= nil and string.match(szName,str) and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then
   table.insert(array,Node)
  end
  FindNodesWithScript(Node,str,array)
 end

  return array
end

function FindNodeByScriptType(vp,stype)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  if Node == 0 then return 0 end
  local Script = readPointer(Node+0x68)
  if Script &gt; 0 and Script ~= nil then
   local ResourcePtr = readPointer(Script+CONST_SCRIPT)
   if ResourcePtr &gt; 0 and ResourcePtr ~= nil then
    local name = readString(ResourcePtr,99,true)
    if string.match(name,stype) then return Node end
   end
  end
  local ret = FindNodeByScriptType(Node,stype)
  if ret &gt; 0 then return ret end
 end

 return 0

end

function FindNodesByScriptType(vp,str,array)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local Script = readPointer(Node+0x68)
  if Script then
    local NameString = readPointer(Script+CONST_SCRIPT)
    local szName = readString(NameString,99,true)
    if szName ~= nil and string.match(szName,str) and readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 then
     table.insert(array,Node)
    end
  end
  FindNodesByScriptType(Node,str,array)
 end
  return array
end

function DebugDumpNodes(vp,bscript)
 local Childs = readPointer(vp+CONST_CHILDREN)
 if Childs == 0 then return 0 end
 local Size = readInteger(Childs-4)

 for i=0,(Size-1) do
  local Node = readPointer(Childs+i*8)
  local NameString = readPointer(Node+CONST_NAMESTRING)
  local Offset = readPointer(NameString+0x08)
  if Offset == 0 then Offset = readPointer(NameString+0x10) end

  local szName = readString(Offset,99,true)


  if not bscript then
   print(string.format("%s : %X",szName,Node))
  else
   local Script = readPointer(Node+0x68)
   local ScriptName = "nil"
   if Script &gt; 0 and Script ~= nil then
   local Script = readPointer(Script+CONST_SCRIPT)
   if Script &gt; 0 and Script ~= nil then ScriptName = readString(Script,99,true) end
   end
   if (readQword(Node+CONST_SCRIPTINSTANCE) &gt; 0 ) then print(string.format("%s : %X (%s)",szName,Node,ScriptName)) end
  end
  DebugDumpNodes(Node,bscript)
 end

 return 0
end

function GenerateClassMember(szName)
  addList = getAddressList()
  StringSearch = szName--inputQuery( '', 'Node Name:', '' )

  local vp = getAddress("pViewport")
  vp = readPointer(vp)

  if vp == 0 then print("no viewport") error("") end

  local Node = FindNodeWithScriptInstance(vp,StringSearch)
  if Node == 0 then print("node not found") error("") end
  local ScriptInstance = readPointer(Node+CONST_SCRIPTINSTANCE)
  local Script = readPointer(ScriptInstance+0x10)

  local ScriptType = executeCodeEx(0,nil,getAddress("GetClassName"),Script)
  if ScriptType == 0 or nil then return end

  local szScriptType = ReadNameString(ScriptType)

  local NodeName = readPointer(Node+CONST_NAMESTRING)
  NodeName = readPointer(NodeName+0x10)
  local szNodeName = readString(NodeName,99,true)

  local ParentRec = addList.createMemoryRecord()
  ParentRec.setDescription("Generated:")
  ParentRec.setAddress(0)
  ParentRec.setType(8)
  ParentRec.DontSave=true

  local NameRec = addList.createMemoryRecord()
  NameRec.setDescription(szNodeName)
  NameRec.setAddress(0)
  NameRec.setType(8)
  NameRec.DontSave=true
  NameRec.appendToEntry(ParentRec)

  if (szScriptType == "GDScript") then
   local VectorVariant = readPointer(ScriptInstance+0x38)
   local Size = readInteger(VectorVariant-0x4)

   Transform(Node,NameRec)

   for i=0,(Size-1) do
    local membermap = readPointer(Script+CONST_MEMBERINDICES)
    local endmap = readPointer(Script+CONST_MEMBERINDICES+0x8)
    local VarName = "null"

    membermap = readPointer(membermap+0x10)
    if (readPointer(membermap+0x10) == endmap) then
     VarName = ReadName(membermap,i)
    else
     while (readPointer(membermap+0x10) ~= endmap) do
       membermap = readPointer(membermap+0x10)
     end
     VarName = ReadName(membermap,i)
    end

    local Type = readInteger(VectorVariant)
    local CEType = GetCEType(Type)

    local Ptr = VectorVariant+0x8

    if (Type == 4 ) then -- if string
     Ptr=readPointer(Ptr) --read ptr to wchars
    end

    if (Type == 5) then -- if vector2
     MemRec(string.format("[%x] %s Vec2.x", i,VarName),Ptr,CEType,NameRec)
     MemRec(string.format("[%x] %s Vec2.y", i,VarName),Ptr+0x4,CEType,NameRec)
    else
     MemRec(string.format("[%x] %s", i,VarName),Ptr,CEType,NameRec)
    end

    VectorVariant=VectorVariant+0x18
   end

   return

end
--end of "GDSript"

if (szScriptType == "VisualScript") then

  Transform(Node,NameRec)

  local membermap = readPointer(ScriptInstance+0x18)
  local endmap = readPointer(ScriptInstance+0x20)
  local MemberInfos = {}

  membermap = readPointer(membermap+0x10)
  if (readPointer(membermap+0x10) == endmap) then
   ReadNameVariant(membermap,MemberInfos)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
   end
   ReadNameVariant(membermap,MemberInfos)
  end

   for i,v in pairs(MemberInfos) do
      local CEType = GetCEType(v.Type)
      MemRec(string.format("[%x] %s", i,v.Name),v.Ptr,CEType,NameRec)
    end

end

end


function FindVariables(szName,t,stype)
  addList = getAddressList()
  StringSearch = szName--inputQuery( '', 'Node Name:', '' )

  local vp = getAddress("pViewport")
  vp = readPointer(vp)

  if vp == 0 then print("no viewport") error("") end

  local Node = FindNodeWithScriptInstance(vp,StringSearch)

  if stype ~= 0 then Node = FindNodeByScriptType(vp,stype) end

  if Node == 0 then print(szName .. " not found - is a game loaded? if yes try again") error("") end
  local ScriptInstance = readPointer(Node+CONST_SCRIPTINSTANCE)
  local Script = readPointer(ScriptInstance+0x10)

  local ScriptType = executeCodeEx(0,nil,getAddress("GetClassName"),Script)
  if ScriptType == 0 or nil then return end

  local szScriptType = ReadNameString(ScriptType)

  local NodeName = readPointer(Node+CONST_NAMESTRING)
  NodeName = readPointer(NodeName+0x10)
  local szNodeName = readString(NodeName,99,true)

  local Generated = addList.getMemoryRecordByDescription("Generated:")
  local ParentRec = 0
  if Generated == nil then
    ParentRec = addList.createMemoryRecord()
    ParentRec.setDescription("Generated:")
    ParentRec.setAddress(0)
    ParentRec.setType(8)
    ParentRec.DontSave=true
  else
   ParentRec = Generated
  end

  local NameRec = addList.createMemoryRecord()
  NameRec.setDescription(szNodeName)
  NameRec.setAddress(0)
  NameRec.setType(8)
  NameRec.DontSave=true
  NameRec.appendToEntry(ParentRec)

  if (szScriptType == "GDScript") then
   local VectorVariant = readPointer(ScriptInstance+0x38)
   local Size = readInteger(VectorVariant-0x4)

   Transform(Node,NameRec)

   for i=0,(Size-1) do
    local membermap = readPointer(Script+CONST_MEMBERINDICES)
    local endmap = readPointer(Script+CONST_MEMBERINDICES+0x8)
    local VarName = "null"

    membermap = readPointer(membermap+0x10)
    if (readPointer(membermap+0x10) == endmap) then
     VarName = ReadName(membermap,i)
    else
     while (readPointer(membermap+0x10) ~= endmap) do
       membermap = readPointer(membermap+0x10)
     end
     VarName = ReadName(membermap,i)
    end

    local Type = readInteger(VectorVariant)
    local CEType = GetCEType(Type)

    local Ptr = VectorVariant+0x8

    if (Type == 4 ) then -- if string
     Ptr=readPointer(Ptr) --read ptr to wchars
    end

    local bAdd = false
    for i,v in pairs(t) do
      if v == VarName then bAdd = true end
    end

    if bAdd then
      if (Type == 5) then -- if vector2
       MemRec(string.format("[%x] %s Vec2.x", i,VarName),Ptr,CEType,NameRec)
       MemRec(string.format("[%x] %s Vec2.y", i,VarName),Ptr+0x4,CEType,NameRec)
      else
       MemRec(string.format("%s",VarName),Ptr,CEType,NameRec)
      end
    end
    VectorVariant=VectorVariant+0x18
   end

   return

end
--end of "GDSript"

if (szScriptType == "VisualScript") then

  Transform(Node,NameRec)

  local membermap = readPointer(ScriptInstance+0x18)
  local endmap = readPointer(ScriptInstance+0x20)
  local MemberInfos = {}

  membermap = readPointer(membermap+0x10)
  if (readPointer(membermap+0x10) == endmap) then
   ReadNameVariant(membermap,MemberInfos)
  else
   while (readPointer(membermap+0x10) ~= endmap) do
     membermap = readPointer(membermap+0x10)
   end
   ReadNameVariant(membermap,MemberInfos)
  end

   for i,v in pairs(MemberInfos) do
      local CEType = GetCEType(v.Type)
      MemRec(string.format("[%x] %s", i,v.Name),v.Ptr,CEType,NameRec)
    end

end

end
[ENABLE]
CONST_CHILDREN = 0x110
CONST_NAMESTRING = 0x128
CONST_SCRIPTINSTANCE = 0x60
CONST_SCRIPT = 0x258
CONST_MEMBERINDICES = 0x1C8
VIEWPORT = 0

local vp = getAddress("pViewport")
vp = readPointer(vp)

if  vp == 0 then print("error : no viewport (focus the game first)") error("no viewport") return end
VIEWPORT = vp

[DISABLE]



</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>257029</ID>
              <Description>"Find Player Variables"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end


[ENABLE]

local vars = {
"max_speed",
"luck",
"hp",
"max_hp",
"stamina",
"max_stamina",
"stamina_regen",
"heal_delay",
"magnet_upgrade",
"health_regen_upgrade",
"auto_heal_upgrade",
"stamina_regen_upgrade",
"item_detector_upgrade",
"max_stacks"
}


FindVariables("Player",vars,0)


[DISABLE]



local Generated = addList.getMemoryRecordByDescription("Player")

if Generated ~= nil then
	while Generated.Count &gt; 0 do
	   Generated.Child[0]:Delete()
	end
    Generated:Delete()
end
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257019</ID>
              <Description>"Find Core(Reactor) Variables"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end


[ENABLE]


local vars = {
"max_hp",
"max_upgrade",
"hp",
"regenerate",
"lumen_to_spawn",
"fuel",
"RANGE"
}

FindVariables("core/reactor",vars,"Reactor.gdc")
--FindVariables("Core",vars)

[DISABLE]



local Generated = addList.getMemoryRecordByDescription("Core")
if Generated == nil then Generated = addList.getMemoryRecordByDescription("Reactor") end

if Generated ~= nil then
	while Generated.Count &gt; 0 do
	   Generated.Child[0]:Delete()
	end
    Generated:Delete()
end
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257016</ID>
              <Description>"God Mode"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local ret = FindScript("Player","damage",0x21)
if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***") error("god mode error") return end

[DISABLE]

local ret = FindScript("Player","damage",0x26)
if ret ~= 1 then print ("***God Mode Error - Is A Game Loaded? if yes then try again***")error("god mode error") return end
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>257017</ID>
              <Description>"Inf. Resources"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end

[ENABLE]

local ret = FindScript("Player","subtract_item",0x21)
if ret ~= 1 then print ("***resource error - is a game loaded? if yes then try again***") error("inf. res error") return end

local ret = FindScript("Player","subtract_stack",0x21)
if ret ~= 1 then print ("***resource error - is a game loaded? if yes then try again***") error("inf. res error") return end

[DISABLE]

local ret = FindScript("Player","subtract_item",0x20)
if ret ~= 1 then print ("***resource error - is a game loaded? if yes then try again***") error("inf. res error")  return end

local ret = FindScript("Player","subtract_stack",0x26)
if ret ~= 1 then print ("***resource error - is a game loaded? if yes then try again***") error("inf. res error")  return end

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>257012</ID>
      <Description>""</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>257006</ID>
          <Description>"Dump"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end


[ENABLE]

DebugDumpNodes(VIEWPORT,true)

[DISABLE]



</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>thread</Name>
      <Address>2AB853F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>testThread</Name>
      <Address>7FF7F4D70000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>testMember</Name>
      <Address>7FF6F07B0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tth</Name>
      <Address>7FF668950000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>getnode</Name>
      <Address>7FF670FF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>NoClipThread</Name>
      <Address>7FF6F3100000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
